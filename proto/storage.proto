syntax = "proto3";

package tolar.proto;

import "block.proto";
import "transaction.proto";
import "event.proto";

enum SentinelRank {
  NONE = 0;
  UNDECIDED = 1;
  SENTINEL = 2;
  WARDEN = 3;
}

message EventParentId {
  uint64 id = 1;
}

message EventMetadata {
  uint64 id = 1;
  SentinelRank rank = 2;
  uint64 round_received = 3;
  uint64 round_created = 4;
  EventParentId other_parent = 5;
  EventParentId self_parent = 6;
  uint64 timestamp = 7;
  repeated uint64 last_ancestors = 8;
  repeated uint64 first_descendants = 9;
  NodeMeta node_meta = 10;
}

message DagSnapshot {
  repeated uint64 chain_event_ids = 1;
}

message PeerConfig {
  bytes public_key = 1;
  string endpoint = 2;
  uint64 id = 3;
}

message RecoverySnapshot {
  DagSnapshot gossip_snapshot = 1;
  DagSnapshot consensus_snapshot = 2;
  uint64 all_warden_round = 3;
  BlockchainSnapshot blockchain_snapshot = 4;
  uint64 network_id = 5;
  repeated PeerConfig active_peers = 6;
  NodeActivationQueueRecovery node_activation_queue_recovery = 7;
  GossipEventsQueueRecovery gossip_events_queue_recovery = 8;
}

message NodeId {
  bytes chain_id = 1;
  uint32 id = 2;
}

message NodeIdMap {
  repeated NodeId nodes = 1;
}

message NodeStartRound {
  repeated uint64 ids = 1;
  uint64 round = 2;
}

message NodeStartRoundList {
  repeated NodeStartRound start_rounds = 1;
}

message SentinelsPerRound {
  repeated uint64 sentinels = 1;
}

message TransactionLocation {
  bytes block_hash = 1;
  uint64 transaction_index = 2;
}

message BlockTx {
  repeated SignedTransaction txs = 1;
}

message FullNodeRecovery {
  uint64 network_id = 1;
  bytes max_block_gas_limit = 2;
  string last_state_root_hash = 3;
  bytes last_block_hash = 4;
  uint64 last_block_index = 5;
}

message NodeToActivate {
  NodeAction action = 1;
  uint32 id = 2;
  string endpoint = 3;
}

message NodesInRound {
  repeated NodeToActivate nodes_in_round = 1;
}

message NodeActivationQueueRecovery {
  map<uint64, NodesInRound> nodes_to_activate = 1;
  uint64 max_processed_round_received = 2;
  repeated NodeMeta requested_new_nodes = 3;
}

message GossipEventsQueueRecovery {
  uint32 queued_creator_node_id = 1;
  repeated bytes queued_events = 2;
}