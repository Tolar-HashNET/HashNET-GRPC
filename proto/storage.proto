syntax = "proto3";

package tolar.proto;

import "block.proto";
import "transaction.proto";
import "event.proto";

enum SentinelRank {
  NONE = 0;
  UNDECIDED = 1;
  SENTINEL = 2;
  WARDEN = 3;
}

message EventParentId {
  uint64 id = 1;
}

message EventMetadata {
  uint64 id = 1;
  SentinelRank rank = 2;
  uint64 round_received = 3;
  uint64 round_created = 4;
  EventParentId other_parent = 5;
  EventParentId self_parent = 6;
  uint64 timestamp = 7;
  repeated uint64 last_ancestors = 8;
  repeated uint64 first_descendants = 9;
}

message DagSnapshot {
  repeated uint64 chain_event_ids = 1;
}

message RecoverySnapshot {
  DagSnapshot gossip_snapshot = 1;
  DagSnapshot consensus_snapshot = 2;
  uint64 all_warden_round = 3;
  BlockchainSnapshot blockchain_snapshot = 4;
  uint64 network_id = 5;
  NetworkUpdateActivatorRecovery network_update_activator = 6;
  uint64 last_round_received = 7;
}

// remove
message NodeId {
  bytes chain_id = 1;
  uint32 id = 2;
}

// remove
message NodeIdMap {
  repeated NodeId nodes = 1;
}

message SentinelsPerRound {
  repeated uint64 sentinels = 1;
}

message TransactionLocation {
  bytes block_hash = 1;
  uint64 transaction_index = 2;
}

message BlockTx {
  repeated SignedTransaction txs = 1;
}

message FullNodeRecovery {
  uint64 network_id = 1;
  bytes max_block_gas_limit = 2;
  string last_state_root_hash = 3;
  bytes last_block_hash = 4;
  uint64 last_block_index = 5;
}

message NetworkUpdateActivatorRecovery {
  uint32 activation_round = 1;
  NetworkUpdate network_update = 2;
}

message Peer {
  string gossip_endpoint = 1;
  bytes public_key = 2;
  uint32 id = 3;
}

message NetworkVersion {
  uint32 version = 1;
  uint32 next_node_id = 2;
  bool is_self_active = 3;
  repeated Peer peers = 4;
  DagSnapshot gossip_snapshot = 5;
}
